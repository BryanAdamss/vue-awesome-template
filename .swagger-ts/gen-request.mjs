/**
 * @author GuangHui
 * @description 扫描接口定义目录，生成openapi-typescript-fetch请求方法
 */

import fs from 'fs'
import { EOL } from 'os'
import path from 'path'

import { globbySync } from 'globby'

import { DTS_OUTPUT_DIR, REQUEST_FILE_OUTPUT_DIR, REQUEST_INPUT_FILES_PATH } from './const.mjs'

/**
 * 提取interface path内容
 *
 * @date 2022-08-20 11:39:00
 * @param {string} cont openapi-typescript生成的文件内容
 * @return {string}  interface path内容
 * @example
 * output
 [`'/pet/{petId}': {
  get: operations['getPetById']
  post: operations['updatePetWithForm']
  delete: operations['deletePet']
}`,...]
 */
function getInterfacePathsCont(cont) {
  const startIndex = cont.indexOf('export interface paths')
  if (startIndex === -1)
    return ''

  const firstExportIndexAfterStartIndex = cont.indexOf('export', startIndex + 1)

  const endIndex = firstExportIndexAfterStartIndex === -1
    ? cont.lastIndexOf('}')
    : firstExportIndexAfterStartIndex

  return cont.slice(startIndex, endIndex)
}

/**
 * 提取pathConts
 *
 * @date 2022-08-20 11:37:33
 * @param {string} pathsCont 提取出的interface paths内容
 * @return {Array}  提取出的path字符串数组
 */
function getPathConts(pathsCont) {
  const pathContReg = /(?<PathCont>['"].*?['"].*?})/gs

  const pathConts = []
  let ret = pathContReg.exec(pathsCont)

  while (ret) {
    const { PathCont } = ret.groups

    PathCont && pathConts.push(PathCont)

    ret = pathContReg.exec(pathsCont)
  }

  pathContReg.lastIndex = 0

  return pathConts
}

/**
 * 生成FnName、Method、Path的元组
 *
 * @date 2022-08-20 11:35:00
 * @param {*} pathConts 提取出的pathConts数组
 * @return {[FnName,Method,Path]}  [FnName,Method,Path]的元组
 * @example
 * input
'/pet/{petId}': {
  get: operations['getPetById']
  post: operations['updatePetWithForm']
  delete: operations['deletePet']
}
* output
[
  ['getPetById', 'get', '/pet/{petId}'],
  ['updatePetWithForm', 'post', '/pet/{petId}'],
  ['deletePet', 'delete', '/pet/{petId}']
]
 */
function getFnNameMethodPathTuple(pathConts) {
  return pathConts.reduce((acc, pathCont) => {
    /* 匹配 */
    const PathRet = /(?<Quote>['"])(?<Path>[\/\w{}]+)\k<Quote>(?=.*?:)/.exec(pathCont)

    const { Path } = PathRet.groups

    const methodAndFnNameReg = /(?<Method>connect|delete|get|head|options|patch|post|put|trace).*?operations\[(?<Quote>['"])(?<FnName>\w+)\k<Quote>\]/g

    let methodAndFnNameRegRet = methodAndFnNameReg.exec(pathCont)

    while (methodAndFnNameRegRet) {
      const { Method, FnName } = methodAndFnNameRegRet.groups

      acc.push([FnName, Method, Path])
      methodAndFnNameRegRet = methodAndFnNameReg.exec(pathCont)
    }

    return acc
  }
  , [])
}

/**
 * 生成文件
 *
 * @date 2022-08-31 15:41:51
 * @param {string} filePath apiTs文件路径
 */
function genFiles(filePath) {
  const apiTsContent = fs.readFileSync(
    filePath,
    'utf-8',
  )

  const interfacePathCont = getInterfacePathsCont(apiTsContent)
  const pathConts = getPathConts(interfacePathCont)
  const fnNameMethodPathTuple = getFnNameMethodPathTuple(pathConts)
  const baseName = path.basename(filePath, '.ts')

  genRequestFile(fnNameMethodPathTuple, filePath, baseName)
  genDtsFile(fnNameMethodPathTuple, filePath, baseName)
}

/**
 * 生成request文件
 *
 * @date 2022-08-31 15:43:35
 * @param {string} fnNameMethodPathTuple 方法名，method元组
 * @param {string} filePath 文件路径
 * @param {string} baseName 文件名
 */
function genRequestFile(fnNameMethodPathTuple, filePath, baseName) {
  const requestStrArr = fnNameMethodPathTuple.reduce((acc, [fnName, method, path]) => {
    return acc.concat(`export const ${fnName} = fetcher.path('${path}').method('${method}').create()${EOL}`)
  }, [])

  requestStrArr.unshift(`import { fetcher } from \'@/services/instance/${baseName}-request-instance\'${EOL}`)

  requestStrArr.unshift(`/**
  * This file was auto-generated by .swagger-ts/gen-request.mjs.
  * Do not make direct changes to the file.
  * Please change ${filePath}, then re-generate it.
  */${EOL}`)

  const outputPath = path.join(process.cwd(), REQUEST_FILE_OUTPUT_DIR, `${baseName}-request.ts`)

  fs.writeFileSync(
    outputPath,
    requestStrArr.join(`${EOL}`),
    (err) => {
      console.log(err)
    })

  console.log(`${outputPath} generated.`)
}

/**
 * 生成dts文件
 *
 * @date 2022-08-31 15:43:35
 * @param {string} fnNameMethodPathTuple 方法名，method元组
 * @param {string} filePath 文件路径
 * @param {string} baseName 文件名
 */
function genDtsFile(fnNameMethodPathTuple, filePath, baseName) {
  const dtsStrArr = fnNameMethodPathTuple.reduce((acc, [fnName]) => {
    const comment = `  /* ${fnName} */`
    const argTypeStr = `  type ${fnName}Arg = FetchArgType<typeof ${fnName}>`
    const retTypeStr = `  type ${fnName}Ret = FetchReturnType<typeof ${fnName}>`
    const errTypeStr = `  type ${fnName}Err = FetchErrorType<typeof ${fnName}>`

    return acc.concat([comment, argTypeStr, retTypeStr, errTypeStr])
  }, [])

  /* declare头尾 */
  dtsStrArr.unshift('declare global {')
  dtsStrArr.push('}')

  /* 声明兼容语句 */
  dtsStrArr.unshift(`export {}${EOL}`)

  /* import语句 */
  dtsStrArr.unshift(`import type { FetchArgType, FetchErrorType, FetchReturnType } from 'openapi-typescript-fetch'${EOL}`)

  /* banner */
  dtsStrArr.unshift(`/**
  * This file was auto-generated by .swagger-ts/gen-request.mjs.
  * Do not make direct changes to the file.
  * Please change ${filePath}, then re-generate it.
  */${EOL}`)

  const outputPath = path.join(process.cwd(), DTS_OUTPUT_DIR, `${baseName}-request.d.ts`)

  fs.writeFileSync(
    outputPath,
    dtsStrArr.join(EOL),
    (err) => {
      console.log(err)
    })

  console.log(`${outputPath} generated.`)
}

/**
 * 入口
 *
 * @date 2022-08-31 15:45:17
 */
function main() {
  const files = globbySync(
    REQUEST_INPUT_FILES_PATH,
    {
      ignore: ['**/node_modules/**'],
    },
  )

  for (let index = 0; index < files.length; index++)
    genFiles(files[index])
}

main()
