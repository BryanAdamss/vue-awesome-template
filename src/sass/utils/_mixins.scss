@charset "UTF-8";

// 选择文本样式
@mixin selection($bgColor: #e74c3c, $color: #ecf0f1) {
  ::selection {
    color: $color;

    background-color: $bgColor;
  }

  ::-moz-selection {
    color: $color;

    background-color: $bgColor;
  }

  ::-webkit-selection {
    color: $color;

    background-color: $bgColor;
  }
}

// 1px边框(伪元素+scale+media query)
// $directionMaps: 是个list类型可以传入多个方向, 也就是可以生成多个防线边框, 默认值为bottom, 你可以根据需要传入(top, left, bottom, right) 4个方向;
// $color: 边框的颜色, 默认#ccc;
// $radius: 圆角半径, 默认0;
// $position是一个高级设置, 一般都不需要改动, 由于细边框的实现使用了css的伪类, 所以为了规避可能出现的样式冲突, 我们可以自己指定使用:after还是:before, 默认after;
@mixin hairline(
  $directionMaps: bottom,
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0
  ),
  $position: after
) {
  // 是否只有一个方向
  $isOnlyOneDir: string==type-of($directionMaps);

  @if ($isOnlyOneDir) {
    $directionMaps: ($directionMaps);
  }

  // 设置border(用于dpr==1)
  @each $directionMap in $directionMaps {
    border-#{$directionMap}: 1px solid $color;
  }

  // 设置圆角
  @if (list == type-of($radius)) {
    // 判断圆角是list还是number
    border-radius: nth($radius, 1)
      nth($radius, 2)
      nth($radius, 3)
      nth($radius, 4);
  } @else {
    border-radius: $radius;
  }

  // 用于drp==2
  @media only screen and (-webkit-min-device-pixel-ratio: 2) {
    & {
      position: relative;

      // 删除1像素密度比下的边框
      @each $directionMap in $directionMaps {
        border-#{$directionMap}: none;
      }
    }

    &::#{$position} {
      position: absolute;
      top: 0;
      left: 0;

      display: block;
      box-sizing: border-box;
      width: 200%;
      height: 200%;
      padding: 1px;

      border: 0 solid $color;
      transform: scale(0.5);
      transform-origin: 0 0;

      content: '';
      pointer-events: none;

      @each $directionMap in $directionMaps {
        border-#{$directionMap}-width: 1px;
      }

      // 判断圆角是list还是number
      @if (list==type-of($radius)) {
        border-radius: nth($radius, 1) *
          2
          nth($radius, 2) *
          2
          nth($radius, 3) *
          2
          nth($radius, 4) *
          2;
      } @else {
        border-radius: $radius * 2;
      }
    }
  }

  // 用于dpr==3
  @media only screen and (-webkit-min-device-pixel-ratio: 3) {
    &::#{$position} {
      // 判断圆角是list还是number
      @if (list==type-of($radius)) {
        border-radius: nth($radius, 1) *
          3
          nth($radius, 2) *
          3
          nth($radius, 3) *
          3
          nth($radius, 4) *
          3;
      } @else {
        border-radius: $radius * 3;
      }

      width: 300%;
      height: 300%;

      transform: scale(0.3333);
    }
  }
}

// 设置上hairline
@mixin hairline-top(
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0
  ),
  $position: after
) {
  @include hairline(top, $color, 0, $position);
}

// 设置下hairline
@mixin hairline-bottom(
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0
  ),
  $position: after
) {
  @include hairline(bottom, $color, 0, $position);
}

// 设置左hairline
@mixin hairline-left(
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0
  ),
  $position: after
) {
  @include hairline(left, $color, 0, $position);
}

// 设置右hairline
@mixin hairline-right(
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0
  ),
  $position: after
) {
  @include hairline(right, $color, 0, $position);
}

// 设置hairline(四条边)
@mixin hairline-all(
  $color: #ccc,
  $radius: (
    0,
    0,
    0,
    0
  ),
  $position: after
) {
  @include hairline((top, right, bottom, left), $color, $radius, $position);
}

// 浮动
@mixin float($side: left) {
  float: unquote($side);
  @if $lte7 {
    _display: inline;
  }
}

// 设置html基本字体样式
@mixin html-font($pageType: PC) {
  // 设置字体平滑
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  font-family: $font-sans-serif;
  @if (unquote($pageType) == PC) {
    font-size: 16px;
    line-height: 1.625;
  } @else {
    font-size: math.div(($ui-width * 0.1), ($ui-width * 0.5)) *
      100vw; // 设计图750，默认1rem为7.5，所以通过这种方式将html的font-size设置为75px，配套的px2rem中1rem也为75px；如果设置为font-size为7.5，可以做到rem、vw最终得到相同的px值，但是因为有字体大小限制(最小12px)，所以只能使用75px
    line-height: 1.5;
    // 为了不让基准字体无限变大或变小破坏布局，所以必须做一个限制
    @media screen and (max-width: 320px) {
      // <320时字体统统为64px
      font-size: 64px;
    }
    @media screen and (min-width: 640px) {
      // >640时字体统统为128px
      font-size: 128px;
    }
  }
}

// 因为在移动端html的字体是根据视口变化的，所以body字体大小需要重新设置，让子元素能继承
@mixin body-font-size($pageType: M) {
  @if (unquote($pageType) ==M) {
    font-size: 16px;
    @media screen and (min-width: 375px) {
      // iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px
      font-size: calc(100% + 2 * (100vw - 375px) / 39);
      font-size: calc(16px + 2 * (100vw - 375px) / 39);
    }

    @media screen and (min-width: 414px) {
      /// 414px-1000px每100像素宽字体增加1px(18px-22px)
      font-size: calc(112.5% + 4 * (100vw - 414px) / 586);
      font-size: calc(18px + 4 * (100vw - 414px) / 586);
    }

    @media screen and (min-width: 600px) {
      // 600px-1000px每100像素宽字体增加1px(20px-24px)
      font-size: calc(125% + 4 * (100vw - 600px) / 400);
      font-size: calc(20px + 4 * (100vw - 600px) / 400);
    }

    @media screen and (min-width: 1000px) {
      // 1000px往后是每100像素0.5px增加
      font-size: calc(137.5% + 6 * (100vw - 1000px) / 1000);
      font-size: calc(22px + 6 * (100vw - 1000px) / 1000);
    }
    // body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小，并让其居中
    max-width: 640px;
    min-width: 320px;
    margin-left: auto;
    margin-right: auto;
  }
}

// 表单禁用样式
@mixin disabled($bgColor: #e6e6e6, $textColor: #ababab) {
  color: $textColor !important;

  background-color: $bgColor !important;
  cursor: not-allowed !important;

  pointer-events: none !important;
}

// 设置过渡效果
@mixin transtion($transition-property: all) {
  transition: $transition-property 0.3s ease-in-out;
}

// 设置透明度
@mixin opacity($opacity: 50) {
  opacity: $opacity * 0.01;
  @if $ie-filter {
    filter: alpha(opacity=$opacity);
  }
}

// 设置黑色半透明背景
@mixin bg-alpha($bgcolor: rgba(0, 0, 0, 0.5)) {
  @if $ie-filter {
    filter: progid:DXImageTransform.Microsoft.gradient(enabled='true', startColorstr='#{ie-hex-str($bgcolor)}', endColorstr='#{ie-hex-str($bgcolor)}');
  } @else {
    background-color: #333;
  }
  background-color: $bgcolor;
}

// 文本截取(单行、多行,截取宽度)
@mixin ellipsis($line: 1, $substract: 0) {
  @if $line==1 {
    white-space: nowrap;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $line;
    -webkit-box-orient: vertical;
  }
  width: 100% - $substract;
  overflow: hidden;
}

// sticky-footer
@mixin sticky-footer(
  $footerH,
  $wp: unquote('.c-Sticky'),
  $content: unquote('.c-Sticky-bd'),
  $footer: unquote('.c-Sticky-ft')
) {
  html,
  body {
    height: 100%;
  }
  #{$wp} {
    position: relative;

    min-height: 100%;
    @if $lte7 {
      /*IE6不识别min-height*/
      height: auto !important;
      height: 100%;
    }
  }
  #{$content} {
    padding-bottom: $footerH;
    overflow: auto;
  }
  #{$footer} {
    position: absolute;
    bottom: 0;

    width: 100%;
  }
}

//设置inline-block
@mixin inline-block($alignment: middle) {
  display: inline-block;
  @if $alignment and $alignment !=none {
    vertical-align: $alignment;
  }
  @if $lte7 {
    *vertical-align: auto;

    *zoom: 1;

    *display: inline;
  }
}

// 设置移动端不同dpr屏幕下的字体大小
@mixin font-size($font-size) {
  font-size: $font-size * 1px;
  [data-dpr='1'] & {
    font-size: $font-size * 0.5px;
  }
  [data-dpr='2'] & {
    font-size: $font-size * 1px;
  }
  [data-dpr='3'] & {
    font-size: $font-size * 1.5px;
  }
}

// 设置双飞翼布局
@mixin double-wing($leftWidth, $rightWidth) {
  & {
    @include clearfix();
  }

  &-main {
    @include float();
    width: 100%;
  }
  &-mainInner {
    margin-right: $rightWidth + px;
    margin-left: $leftWidth + px;
  }

  &-left {
    @include float();
    width: $leftWidth + px;
    margin-left: -100%;
  }
  &-right {
    @include float();
    width: $rightWidth + px;
    margin-left: -$rightWidth + px;
  }
}

// 针对ie8设置样式
@mixin ie8() {
  .ie8 & {
    @content;
  }
}

// 针对ie9设置样式
@mixin ie9() {
  .ie9 & {
    @content;
  }
}

// 波点背景(通过径向渐变生成，IE10+)
@mixin bg-polka($size, $dot, $base, $accent) {
  // 单独一个波点图所占空间，波点半径，波点图背景色，波点的颜色
  background-color: $base;
  background-image: radial-gradient($accent $dot, transparent 0),
    radial-gradient($accent $dot, transparent 0);
  background-position: 0 0, $size * 0.5 $size * 0.5;
  background-size: $size $size;
}

// 棋盘背景(通过线性渐变生成，IE9+)
@mixin bg-checkboard($size, $base, $accent: rgba(0, 0, 0, 0.25)) {
  // 单个棋格子大小，棋盘背景色，棋格颜色
  background-color: $base;
  background-image: linear-gradient(
      45deg,
      $accent 25%,
      transparent 0,
      transparent 75%,
      $accent 0
    ),
    linear-gradient(
      45deg,
      $accent 25%,
      transparent 0,
      transparent 75%,
      $accent 0
    );
  background-position: 0 0, $size $size;
  background-size: 2 * $size 2 * $size;
}

// 斜向切角
@mixin bevel-corners($bg, $tl: 0, $tr: $tl, $br: $bl, $bl: $tr) {
  background: linear-gradient(135deg, transparent $tl, $bg 0) top left,
    linear-gradient(225deg, transparent $tr, $bg 0) top right,
    linear-gradient(45deg, transparent $tr, $bg 0) bottom right,
    linear-gradient(-45deg, transparent $tr, $bg 0) bottom left;
  // 背景色，tl切角，tr切角，br切角，bl切角
  background-color: $bg;
  background-repeat: no-repeat;
  background-size: 50% 50%;
}

// 弧形切角
@mixin scoop-corners($bg, $tl: 0, $tr: $tl, $br: $bl, $bl: $tr) {
  background: radial-gradient(circle at top left, transparent $tl, $bg 0) top
      left,
    radial-gradient(circle at top right, transparent $tr, $bg 0) top right,
    radial-gradient(circle at bottom right, transparent $br, $bg 0) bottom right,
    radial-gradient(circle at bottom left, transparent $bl, $bg 0) bottom left;
  // 背景色，tl切角，tr切角，br切角，bl切角
  background-color: $bg;
  background-repeat: no-repeat;
  background-size: 50% 50%;
}

// 图片保持宽高比
@mixin aspect-ratio($width: 16, $height: 9) {
  // 默认16:9
  @at-root #{&}::before {
    float: left; // 元素需要浮动，不然后面元素需要使用绝对定位
    height: 0; // 本身高度必须置0
    padding-top: percentage(
      math.div($height, $width)
    ); // 使用padding-top撑起高度

    content: '';
  }
  @at-root #{&}::after {
    display: table;
    clear: both;
    // 清除浮动
    content: '';
  }
}

// 3d文字
@mixin text-3d($color: white, $depth: 5) {
  // 阴影颜色，深度
  $shadows: ();
  $shadow-color: $color;

  @for $i from 1 through $depth {
    $shadow-color: darken($shadow-color, 10%);
    $shadows: append($shadows, 0 ($i * 1px) $shadow-color, comma);
  }

  color: $color;
  text-shadow: append($shadows, 0 ($depth * 1px) 10px black, comma);
}

// 根据元素数量选择元素
@mixin n-items($n) {
  @if $n==1 {
    &:only-child {
      @content;
    }
  } @else {
    &:first-child:nth-last-child(#{$n}),
    &:first-child:nth-last-child(#{$n}) ~ & {
      @content;
    }
  }
}
