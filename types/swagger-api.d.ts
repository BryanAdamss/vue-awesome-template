/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export{}

declare global {
  interface paths {
    readonly '/pet/{petId}/uploadImage': {
      readonly post: operations['uploadFile']
    }
    readonly '/pet': {
      readonly put: operations['updatePet']
      readonly post: operations['addPet']
    }
    readonly '/pet/findByStatus': {
      /** Multiple status values can be provided with comma separated strings */
      readonly get: operations['findPetsByStatus']
    }
    readonly '/pet/findByTags': {
      /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
      readonly get: operations['findPetsByTags']
    }
    readonly '/pet/{petId}': {
      /** Returns a single pet */
      readonly get: operations['getPetById']
      readonly post: operations['updatePetWithForm']
      readonly delete: operations['deletePet']
    }
    readonly '/store/order': {
      readonly post: operations['placeOrder']
    }
    readonly '/store/order/{orderId}': {
      /** For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions */
      readonly get: operations['getOrderById']
      /** For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors */
      readonly delete: operations['deleteOrder']
    }
    readonly '/store/inventory': {
      /** Returns a map of status codes to quantities */
      readonly get: operations['getInventory']
    }
    readonly '/user/createWithArray': {
      readonly post: operations['createUsersWithArrayInput']
    }
    readonly '/user/createWithList': {
      readonly post: operations['createUsersWithListInput']
    }
    readonly '/user/{username}': {
      readonly get: operations['getUserByName']
      /** This can only be done by the logged in user. */
      readonly put: operations['updateUser']
      /** This can only be done by the logged in user. */
      readonly delete: operations['deleteUser']
    }
    readonly '/user/login': {
      readonly get: operations['loginUser']
    }
    readonly '/user/logout': {
      readonly get: operations['logoutUser']
    }
    readonly '/user': {
      /** This can only be done by the logged in user. */
      readonly post: operations['createUser']
    }
  }
  
  interface definitions {
    readonly ApiResponse: {
      /** Format: int32 */
      readonly code?: number
      readonly type?: string
      readonly message?: string
    }
    readonly Category: {
      /** Format: int64 */
      readonly id?: number
      readonly name?: string
    }
    readonly Pet: {
      /** Format: int64 */
      readonly id?: number
      readonly category?: definitions['Category']
      /** @example doggie */
      readonly name: string
      readonly photoUrls: readonly string[]
      readonly tags?: readonly definitions['Tag'][]
      /**
       * @description pet status in the store
       * @enum {string}
       */
      readonly status?: 'available' | 'pending' | 'sold'
    }
    readonly Tag: {
      /** Format: int64 */
      readonly id?: number
      readonly name?: string
    }
    readonly Order: {
      /** Format: int64 */
      readonly id?: number
      /** Format: int64 */
      readonly petId?: number
      /** Format: int32 */
      readonly quantity?: number
      /** Format: date-time */
      readonly shipDate?: string
      /**
       * @description Order Status
       * @enum {string}
       */
      readonly status?: 'placed' | 'approved' | 'delivered'
      readonly complete?: boolean
    }
    readonly User: {
      /** Format: int64 */
      readonly id?: number
      readonly username?: string
      readonly firstName?: string
      readonly lastName?: string
      readonly email?: string
      readonly password?: string
      readonly phone?: string
      /**
       * Format: int32
       * @description User Status
       */
      readonly userStatus?: number
    }
  }
  
  interface operations {
    readonly uploadFile: {
      readonly parameters: {
        readonly path: {
          /** ID of pet to update */
          readonly petId: number
        }
        readonly formData: {
          /** Additional data to pass to server */
          readonly additionalMetadata?: string
          /** file to upload */
          readonly file?: unknown
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: definitions['ApiResponse']
        }
      }
    }
    readonly updatePet: {
      readonly parameters: {
        readonly body: {
          /** Pet object that needs to be added to the store */
          readonly body: definitions['Pet']
        }
      }
      readonly responses: {
        /** Invalid ID supplied */
        readonly 400: unknown
        /** Pet not found */
        readonly 404: unknown
        /** Validation exception */
        readonly 405: unknown
      }
    }
    readonly addPet: {
      readonly parameters: {
        readonly body: {
          /** Pet object that needs to be added to the store */
          readonly body: definitions['Pet']
        }
      }
      readonly responses: {
        /** Invalid input */
        readonly 405: unknown
      }
    }
    /** Multiple status values can be provided with comma separated strings */
    readonly findPetsByStatus: {
      readonly parameters: {
        readonly query: {
          /** Status values that need to be considered for filter */
          readonly status: readonly ('available' | 'pending' | 'sold')[]
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: readonly definitions['Pet'][]
        }
        /** Invalid status value */
        readonly 400: unknown
      }
    }
    /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
    readonly findPetsByTags: {
      readonly parameters: {
        readonly query: {
          /** Tags to filter by */
          readonly tags: readonly string[]
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: readonly definitions['Pet'][]
        }
        /** Invalid tag value */
        readonly 400: unknown
      }
    }
    /** Returns a single pet */
    readonly getPetById: {
      readonly parameters: {
        readonly path: {
          /** ID of pet to return */
          readonly petId: number
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: definitions['Pet']
        }
        /** Invalid ID supplied */
        readonly 400: unknown
        /** Pet not found */
        readonly 404: unknown
      }
    }
    readonly updatePetWithForm: {
      readonly parameters: {
        readonly path: {
          /** ID of pet that needs to be updated */
          readonly petId: number
        }
        readonly formData: {
          /** Updated name of the pet */
          readonly name?: string
          /** Updated status of the pet */
          readonly status?: string
        }
      }
      readonly responses: {
        /** Invalid input */
        readonly 405: unknown
      }
    }
    readonly deletePet: {
      readonly parameters: {
        readonly header: {
          readonly api_key?: string
        }
        readonly path: {
          /** Pet id to delete */
          readonly petId: number
        }
      }
      readonly responses: {
        /** Invalid ID supplied */
        readonly 400: unknown
        /** Pet not found */
        readonly 404: unknown
      }
    }
    readonly placeOrder: {
      readonly parameters: {
        readonly body: {
          /** order placed for purchasing the pet */
          readonly body: definitions['Order']
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: definitions['Order']
        }
        /** Invalid Order */
        readonly 400: unknown
      }
    }
    /** For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions */
    readonly getOrderById: {
      readonly parameters: {
        readonly path: {
          /** ID of pet that needs to be fetched */
          readonly orderId: number
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: definitions['Order']
        }
        /** Invalid ID supplied */
        readonly 400: unknown
        /** Order not found */
        readonly 404: unknown
      }
    }
    /** For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors */
    readonly deleteOrder: {
      readonly parameters: {
        readonly path: {
          /** ID of the order that needs to be deleted */
          readonly orderId: number
        }
      }
      readonly responses: {
        /** Invalid ID supplied */
        readonly 400: unknown
        /** Order not found */
        readonly 404: unknown
      }
    }
    /** Returns a map of status codes to quantities */
    readonly getInventory: {
      readonly parameters: {}
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: { readonly [key: string]: number }
        }
      }
    }
    readonly createUsersWithArrayInput: {
      readonly parameters: {
        readonly body: {
          /** List of user object */
          readonly body: readonly definitions['User'][]
        }
      }
      readonly responses: {
        /** successful operation */
        readonly default: unknown
      }
    }
    readonly createUsersWithListInput: {
      readonly parameters: {
        readonly body: {
          /** List of user object */
          readonly body: readonly definitions['User'][]
        }
      }
      readonly responses: {
        /** successful operation */
        readonly default: unknown
      }
    }
    readonly getUserByName: {
      readonly parameters: {
        readonly path: {
          /** The name that needs to be fetched. Use user1 for testing. */
          readonly username: string
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly schema: definitions['User']
        }
        /** Invalid username supplied */
        readonly 400: unknown
        /** User not found */
        readonly 404: unknown
      }
    }
    /** This can only be done by the logged in user. */
    readonly updateUser: {
      readonly parameters: {
        readonly path: {
          /** name that need to be updated */
          readonly username: string
        }
        readonly body: {
          /** Updated user object */
          readonly body: definitions['User']
        }
      }
      readonly responses: {
        /** Invalid user supplied */
        readonly 400: unknown
        /** User not found */
        readonly 404: unknown
      }
    }
    /** This can only be done by the logged in user. */
    readonly deleteUser: {
      readonly parameters: {
        readonly path: {
          /** The name that needs to be deleted */
          readonly username: string
        }
      }
      readonly responses: {
        /** Invalid username supplied */
        readonly 400: unknown
        /** User not found */
        readonly 404: unknown
      }
    }
    readonly loginUser: {
      readonly parameters: {
        readonly query: {
          /** The user name for login */
          readonly username: string
          /** The password for login in clear text */
          readonly password: string
        }
      }
      readonly responses: {
        /** successful operation */
        readonly 200: {
          readonly headers: {}
          readonly schema: string
        }
        /** Invalid username/password supplied */
        readonly 400: unknown
      }
    }
    readonly logoutUser: {
      readonly parameters: {}
      readonly responses: {
        /** successful operation */
        readonly default: unknown
      }
    }
    /** This can only be done by the logged in user. */
    readonly createUser: {
      readonly parameters: {
        readonly body: {
          /** Created user object */
          readonly body: definitions['User']
        }
      }
      readonly responses: {
        /** successful operation */
        readonly default: unknown
      }
    }
  }
  
  interface external {}
  
  enum ApiPaths {
    uploadFile = '/pet/:petId/uploadImage',
    addPet = '/pet',
    updatePet = '/pet',
    findPetsByStatus = '/pet/findByStatus',
    findPetsByTags = '/pet/findByTags',
    getPetById = '/pet/:petId',
    updatePetWithForm = '/pet/:petId',
    deletePet = '/pet/:petId',
    placeOrder = '/store/order',
    getOrderById = '/store/order/:orderId',
    deleteOrder = '/store/order/:orderId',
    getInventory = '/store/inventory',
    createUsersWithArrayInput = '/user/createWithArray',
    createUsersWithListInput = '/user/createWithList',
    getUserByName = '/user/:username',
    updateUser = '/user/:username',
    deleteUser = '/user/:username',
    loginUser = '/user/login',
    logoutUser = '/user/logout',
    createUser = '/user',
  }
}


